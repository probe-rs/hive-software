/// Contains all possible defines which are generated on request to be added to an autogenerated `hive_defines.S` file
use uid::IdU32;

/// This trait implementation allows a Type to be used in the `hive_defines.S` file.
pub(super) trait HiveDefine {
    /// The generate function is called before a new hive_defines file is created. It can be used to generate a UID for example.
    fn generate(&mut self);
    /// The returned String represents a file line in the final `hive_defines.S`
    fn to_file_line(&self) -> String;
}

/// Returns all active defines which are to be included in the final `hive_defines.S` file.
///
/// If you create a new impl of [`HiveDefine`], you need to add it to the vector which is returned by this function in order for it to get generated in the final file.
pub(super) fn get_active_defines() -> Vec<Box<dyn HiveDefine>> {
    vec![Box::new(HiveUid::new())]
}

/// Defines a `HIVE_UID` symbol which holds a 32 bit UID which is unique on each test-run
struct HiveUid {
    uid: IdU32<Self>,
}

impl HiveUid {
    fn new() -> Self {
        HiveUid { uid: IdU32::new() }
    }
}

impl HiveDefine for HiveUid {
    fn generate(&mut self) {
        self.uid = IdU32::new();
    }

    fn to_file_line(&self) -> String {
        format!(".set HIVE_UID, {}", self.uid)
    }
}
