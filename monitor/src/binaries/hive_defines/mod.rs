//! Management of the Hive define file which gets injected into the testprograms

mod defines;

use std::io::Write;
use std::fs::OpenOptions;

use super::testprogram::TestProgram;

const FILE_HEADER: &str = 
    "# File: Hive defines\n# Author: Hive (autogenerated)\n# This file contains all symbols which can be used by a Hive testprogram.\n# The symbols are set to the appropriate value by Hive, before the final binary is flashed\n\n";

/// Inserts a newly generated `hive_defines.S` file into the provided testprogram 
/// 
/// # Panics
/// If any file operation fails. This is usually caused by wrong/insufficient permissions or corrupted installs
pub(crate) fn insert_hive_defines(testprogram: &TestProgram){
    log::debug!("Inserting the hive_defines.S files into the '{}' testprogram", testprogram.name);
    let open_options = OpenOptions::new().write(true).create(true).truncate(true).to_owned();

    let mut arm_defines = open_options.open(testprogram.path.to_owned().join("arm/hive_defines.S")).expect("Failed to open/create the hive_defines.S files. This might be caused by insufficient permissions.");
    let mut riscv_defines = open_options.open(testprogram.path.to_owned().join("riscv/hive_defines.S")).expect("Failed to open/create the hive_defines.S files. This might be caused by insufficient permissions.");

    let content = generate_defines();

    arm_defines.write_all(content.as_bytes()).expect("Failed to write the hive_defines.S file contents.");
    riscv_defines.write_all(content.as_bytes()).expect("Failed to write the hive_defines.S file contents.");
}

/// generates the `hive_defines.S` file contents and returns its binary representation
fn generate_defines() -> String {
    let mut defines = String::new();

    for mut define in defines::get_active_defines() {
        define.generate();
        defines.push_str(&format!("{}\n", define.to_file_line()))
    }

    let mut out = FILE_HEADER.to_owned();
    out.push_str(&defines);
    out
}