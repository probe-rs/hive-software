//! Contains all possible defines which are generated on request to be added to an autogenerated `hive_defines.S` file
use std::sync::Mutex;

use lazy_static::lazy_static;

mod uid;

const FILE_HEADER: &str = 
    "# File: Hive defines\n# Author: Hive (autogenerated)\n# This file contains all symbols which can be used by a Hive testprogram.\n# The symbols are set to the appropriate value by Hive, before the final binary is flashed\n\n";

lazy_static! {
    static ref DEFINE_REGISTRY: Mutex<DefineRegistry> = {
        let mut registry = DefineRegistry::new();

        registry.register(Box::new(uid::HiveUid::new()));

        Mutex::new(registry)
    };
}

/// generates the `hive_defines.S` file contents and returns its binary representation
pub(super) fn generate_defines() -> String {
    let mut defines = String::new();

    for define in DEFINE_REGISTRY.lock().unwrap().get_active_defines() {
        define.generate();
        defines.push_str(&format!("{}\n", define.to_file_line()))
    }

    let mut out = FILE_HEADER.to_owned();
    out.push_str(&defines);
    out
}

struct DefineRegistry{
    registered_defines: Vec<Box<dyn HiveDefine + Sync + Send>>
}

impl<'a> DefineRegistry {
    fn new() -> Self {
        Self {
            registered_defines: vec![],
        }
    }

    /// Registers a new define
    fn register(&mut self, define: Box<dyn HiveDefine + Sync + Send>) {
        self.registered_defines.push(define);
    }

    /// Returns all active defines which are to be included in the final `hive_defines.S` file.
    ///
    /// If you create a new impl of [`HiveDefine`], you need to add it to the vector which is returned by this function in order for it to get generated in the final file.
    fn get_active_defines(&mut self) -> &mut Vec<Box<dyn HiveDefine + Sync + Send>>{
        &mut self.registered_defines
    }
}

/// This trait implementation allows a Type to be used in the `hive_defines.S` file.
pub(super) trait HiveDefine {
    /// The generate function is called before a new hive_defines file is created. It can be used to generate a UID for example.
    fn generate(&mut self);
    /// The returned String represents a file line in the final `hive_defines.S`
    fn to_file_line(&self) -> String;
}
